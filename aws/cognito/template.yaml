# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Amazon Cognito User Pool with Passwordless E-Mail Auth configured

Metadata:
  AWS::ServerlessRepo::Application:
    Name: amazon-cognito-passwordless-email-auth
    Description: >
      An Amazon Cognito user pool, pre-configured with AWS Lambda triggers to implement passwordless e-mail auth
    Author: Tracktak
    SpdxLicenseId: MIT-0
    LicenseUrl: LICENSE
    Labels: ["cognito", "passwordless", "authentication", "auth", "sample"]
    SemanticVersion: 1.0.3

Globals:
  Function:
    Timeout: 3

Parameters:
  UserPoolName:
    Type: String
    Description: The name you want the User Pool to be created with
  SESFromAddress:
    Type: String
    Description: The e-mail address to send the secret login code from
  SESSourceARN:
    Type: String
    Description: The SES Source ARN Cognito will use for sending emails
  EnvType:
    Description: Environment type.
    Default: test
    Type: String
    AllowedValues:
      - prod
      - test
    ConstraintDescription: Must specify prod or test.
  GoogleClientId:
    Type: String
    Description: Google Social Media Sign In Client Id
  GoogleClientSecret:
    Type: String
    Description: Google Social Media Sign In Client Secret
  FacebookClientId:
    Type: String
    Description: Facebook Social Media Sign In Client Id
  FacebookClientSecret:
    Type: String
    Description: Facebook Social Media Sign In Client Secret
  UserPoolDomainCertARN:
    Type: String
    Description: ARN for user pool custom domain certificate

Conditions:
  CreateTestResources: !Equals
    - !Ref EnvType
    - test
  CreateProdResources: !Equals
    - !Ref EnvType
    - prod

Mappings:
  EnvMap:
    test:
      CallbackURLs: https://staging.tracktak.com/dashboard
      LogoutURLs: https://staging.tracktak.com/
      ConfirmationURL: https://staging.tracktak.com/dashboard
    prod:
      CallbackURLs: https://tracktak.com/dashboard
      LogoutURLs: https://tracktak.com/
      ConfirmationURL: https://tracktak.com/dashboard

Resources:
  ChangePassword:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-triggers/change-password/
      Handler: change-password.handler
      Runtime: nodejs12.x
      FunctionName: ChangePassword
      Policies:
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cognito-identity:*
            - cognito-idp:*
            Resource: "*"

  DefineAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-triggers/define-auth-challenge/
      Handler: define-auth-challenge.handler
      Runtime: nodejs12.x

  CreateAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-triggers/create-auth-challenge/
      Handler: create-auth-challenge.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          SES_FROM_ADDRESS: !Ref SESFromAddress
          CONFIRMATION_URL: !FindInMap [EnvMap, !Ref EnvType, ConfirmationURL]
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
              Resource: "*"

  VerifyAuthChallengeResponse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-triggers/verify-auth-challenge-response/
      Handler: verify-auth-challenge-response.handler
      Runtime: nodejs12.x
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Sid: PermissionToInvoke
              Action:
                - lambda:InvokeFunction
              Resource: "arn:aws:lambda:*:*:*:*"
            - Effect: Allow
              Action:
              - cognito-identity:*
              - cognito-idp:*
              Resource: "*"

  PreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-triggers/pre-sign-up/
      Handler: pre-sign-up.handler
      Runtime: nodejs12.x

  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Ref UserPoolName
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: true
      AutoVerifiedAttributes:
        - email
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
      MfaConfiguration: "OFF"
      LambdaConfig:
        CreateAuthChallenge: !GetAtt CreateAuthChallenge.Arn
        DefineAuthChallenge: !GetAtt DefineAuthChallenge.Arn
        PreSignUp: !GetAtt PreSignUp.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponse.Arn
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: no-reply@tracktak.com
        ReplyToEmailAddress: no-reply@tracktak.com
        SourceArn: !Ref SESSourceARN

  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    DependsOn:
      - UserPoolIdentityProviderGoogle
      - UserPoolIdentityProviderFacebook
    Properties:
      ClientName: email-auth-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - Google
        - Facebook
      CallbackURLs:
        - !FindInMap [EnvMap, !Ref EnvType, CallbackURLs]
      LogoutURLs:
        - !FindInMap [EnvMap, !Ref EnvType, LogoutURLs]
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin

  UserPoolIdentityProviderGoogle:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      AttributeMapping:
        username: "sub"
        email: "email"
        email_verified: "email_verified"
        name: "name"
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: "profile email openid"
      ProviderName: "Google"
      ProviderType: "Google"
      UserPoolId: !Ref UserPool

  UserPoolIdentityProviderFacebook:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      AttributeMapping:
        username: "id"
        email: "email"
        name: "name"
      ProviderDetails:
        client_id: !Ref FacebookClientId
        client_secret: !Ref FacebookClientSecret
        authorize_scopes: "public_profile,email,openid"
      ProviderName: "Facebook"
      ProviderType: "Facebook"
      UserPoolId: !Ref UserPool

  UserPoolDomainProd:
    Type: AWS::Cognito::UserPoolDomain
    Condition: CreateProdResources
    Properties:
      CustomDomainConfig:
        CertificateArn: !Ref UserPoolDomainCertARN
      Domain: registration.tracktak.com
      UserPoolId: !Ref UserPool

  UserPoolDomainTest:
    Type: AWS::Cognito::UserPoolDomain
    Condition: CreateTestResources
    Properties:
      Domain: tracktak-test
      UserPoolId: !Ref UserPool

  DefineAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DefineAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  CreateAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  VerifyAuthChallengeResponseInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt VerifyAuthChallengeResponse.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  PreSignUpInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUp.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

Outputs:
  UserPoolId:
    Description: ID of the User Pool
    Value: !Ref UserPool
  UserPoolClientId:
    Description: ID of the User Pool Client
    Value: !Ref UserPoolClient
