{"version":3,"file":"index.modern.js","sources":["../src/shared/industryAverage.js","../src/shared/industryMappings.js","../src/selectors/fundamentalSelectors/selectGeneral.js","../src/selectors/fundamentalSelectors/selectIsInUS.js","../src/selectors/fundamentalSelectors/selectCurrentIndustry.js","../src/components/BoldValueLabel.jsx","../src/components/FormatRawNumber.jsx","../src/components/FormatRawNumberToPercent.jsx","../src/shared/roundDecimal.js","../src/components/IndustryAveragesSummary.jsx"],"sourcesContent":["import industryAveragesGlobalJson from \"../data/industryAveragesGlobal.json\";\r\nimport industryAveragesUSJson from \"../data/industryAveragesUS.json\";\r\n\r\nconst getConvertedIndustryAverages = (industryAverages) => {\r\n  return industryAverages.map((industryAverage) => {\r\n    const industryAverageObject = {};\r\n\r\n    Object.keys(industryAverage).forEach((key) => {\r\n      const value = industryAverage[key];\r\n\r\n      if (typeof value === \"string\") {\r\n        const parsedNumber = parseFloat(value);\r\n\r\n        industryAverageObject[key] = isNaN(parsedNumber)\r\n          ? value\r\n          : parsedNumber / 100;\r\n      } else {\r\n        industryAverageObject[key] = value;\r\n      }\r\n    });\r\n\r\n    return industryAverageObject;\r\n  });\r\n};\r\n\r\nconst industryAverage = {\r\n  global: getConvertedIndustryAverages(industryAveragesGlobalJson),\r\n  US: getConvertedIndustryAverages(industryAveragesUSJson),\r\n};\r\n\r\nexport default industryAverage;\r\n","import industryMappingJson from \"../data/industryMapping.json\";\r\n\r\nexport const spaceRegex = /\\s/g;\r\nconst industryMapping = {};\r\n\r\nObject.keys(industryMappingJson).forEach((key) => {\r\n  const noSpaceKey = key.replace(spaceRegex, \"\").toUpperCase();\r\n\r\n  industryMapping[noSpaceKey] = industryMappingJson[key];\r\n});\r\n\r\nexport default industryMapping;\r\n","const selectGeneral = (state) => state.fundamentals.data?.General;\r\n\r\nexport default selectGeneral;\r\n","const selectIsInUS = (state) => {\r\n  return state.fundamentals.data?.General.CountryISO === \"US\";\r\n};\r\n\r\nexport default selectIsInUS;\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\nimport industryAverage from \"../../shared/industryAverage\";\r\nimport industryMapping, { spaceRegex } from \"../../shared/industryMappings\";\r\nimport selectGeneral from \"./selectGeneral\";\r\nimport selectIsInUS from \"./selectIsInUS\";\r\n\r\nconst selectCurrentIndustry = createSelector(\r\n  selectGeneral,\r\n  selectIsInUS,\r\n  (general, isInUS) => {\r\n    const currentIndustryMutated = general.Industry.replace(\r\n      spaceRegex,\r\n      \"\"\r\n    ).toUpperCase();\r\n    const mappedCurrentIndustry = industryMapping[currentIndustryMutated];\r\n    const industryAverages = isInUS\r\n      ? industryAverage.US\r\n      : industryAverage.global;\r\n    const currentIndustry = industryAverages.find((datum) => {\r\n      return datum.industryName === mappedCurrentIndustry;\r\n    });\r\n\r\n    return {\r\n      ...currentIndustry,\r\n      standardDeviationInStockPrices:\r\n        currentIndustry.standardDeviationInStockPrices,\r\n    };\r\n  }\r\n);\r\n\r\nexport default selectCurrentIndustry;\r\n","import { Box, Typography, useTheme } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst BoldSpan = ({ value }) => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Box component=\"span\" sx={{ fontWeight: theme.typography.fontWeightBold }}>\r\n      {value}\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst BoldValueLabel = ({ value, label, reverse }) => {\r\n  return (\r\n    <Typography>\r\n      <Box sx={{ display: \"flex\" }}>\r\n        {reverse ? (\r\n          <>\r\n            {label}&nbsp;\r\n            <BoldSpan value={value} />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <BoldSpan value={value} />\r\n            &nbsp;{label}\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default BoldValueLabel;\r\n","import React from \"react\";\nimport NumberFormat from \"react-number-format\";\n\nconst FormatRawNumber = ({ value, ...props }) => {\n  let newValue = value;\n\n  // Allows defaultValue to show for null values\n  if (value === null) {\n    newValue = undefined;\n  }\n\n  return (\n    <NumberFormat\n      thousandSeparator\n      decimalScale={0}\n      defaultValue=\"-\"\n      value={newValue}\n      displayType=\"text\"\n      {...props}\n    />\n  );\n};\n\nexport default FormatRawNumber;\n","import React from \"react\";\nimport roundDecimal from \"../shared/roundDecimal\";\nimport FormatRawNumber from \"./FormatRawNumber\";\n\nconst FormatRawNumberToPercent = ({ value = null, ...props }) => {\n  const newValue = value !== null ? roundDecimal(value, 4) : null;\n\n  return (\n    <FormatRawNumber value={newValue} suffix=\"%\" decimalScale={2} {...props} />\n  );\n};\n\nexport default FormatRawNumberToPercent;\n","const roundDecimal = (value, decimalPlaces) => {\r\n  const power = Math.pow(10, decimalPlaces);\r\n  return Math.round(value * power) / 100;\r\n};\r\n\r\nexport default roundDecimal;\r\n","import { Box, Typography, useTheme } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport selectCurrentIndustry from \"../selectors/fundamentalSelectors/selectCurrentIndustry\";\nimport selectIsInUS from \"../selectors/fundamentalSelectors/selectIsInUS\";\nimport BoldValueLabel from \"./BoldValueLabel\";\nimport FormatRawNumberToPercent from \"./FormatRawNumberToPercent\";\n\nconst IndustryAveragesSummary = () => {\n  const theme = useTheme();\n  const isInUS = useSelector(selectIsInUS);\n  const currentIndustry = useSelector(selectCurrentIndustry);\n\n  return (\n    <>\n      <Typography variant=\"h5\">\n        Industry Averages ({isInUS ? \"US\" : \"Global\"})\n      </Typography>\n      <Typography\n        gutterBottom\n        style={{ fontWeight: theme.typography.fontWeightBold }}\n      >\n        {currentIndustry.industryName}\n      </Typography>\n      <Box\n        sx={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          gridColumnGap: theme.spacing(3),\n        }}\n      >\n        <Box>\n          <BoldValueLabel\n            value={\n              <FormatRawNumberToPercent\n                value={currentIndustry.annualAverageCAGRLastFiveYears}\n              />\n            }\n            label=\"CAGR Past Five Years\"\n          />\n          <BoldValueLabel\n            value={\n              <FormatRawNumberToPercent\n                value={currentIndustry.preTaxOperatingMarginUnadjusted}\n              />\n            }\n            label=\"Pre-tax Operating Margin (TTM)\"\n          />\n          <BoldValueLabel\n            value={\n              <FormatRawNumberToPercent value={currentIndustry.afterTaxROIC} />\n            }\n            label=\"ROIC (TTM)\"\n          />\n          <BoldValueLabel\n            value={currentIndustry[\"sales/Capital\"]}\n            label=\"Sales to Capital Ratio\"\n          />\n        </Box>\n        <Box>\n          <BoldValueLabel\n            value={\n              <FormatRawNumberToPercent value={currentIndustry.costOfCapital} />\n            }\n            label=\"Cost of Capital\"\n          />\n          <BoldValueLabel\n            value={currentIndustry.unleveredBeta}\n            label=\"Unlevered Beta\"\n          />\n          <BoldValueLabel\n            value={currentIndustry.equityLeveredBeta}\n            label=\"Levered Beta\"\n          />\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default IndustryAveragesSummary;\n"],"names":["getConvertedIndustryAverages","industryAverages","map","industryAverage","industryAverageObject","Object","keys","forEach","key","value","parsedNumber","parseFloat","isNaN","spaceRegex","industryMapping","industryMappingJson","noSpaceKey","replace","toUpperCase","selectIsInUS","state","fundamentals","data","General","CountryISO","selectCurrentIndustry","createSelector","_state$fundamentals$d","general","isInUS","currentIndustryMutated","Industry","mappedCurrentIndustry","currentIndustry","find","datum","industryName","standardDeviationInStockPrices","BoldSpan","theme","useTheme","React","Box","component","sx","fontWeight","typography","fontWeightBold","BoldValueLabel","label","Typography","display","reverse","FormatRawNumber","props","newValue","undefined","NumberFormat","thousandSeparator","decimalScale","defaultValue","displayType","FormatRawNumberToPercent","decimalPlaces","power","Math","pow","round","roundDecimal","suffix","IndustryAveragesSummary","useSelector","variant","gutterBottom","style","flexWrap","gridColumnGap","spacing","annualAverageCAGRLastFiveYears","preTaxOperatingMarginUnadjusted","afterTaxROIC","costOfCapital","unleveredBeta","equityLeveredBeta"],"mappings":"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"}