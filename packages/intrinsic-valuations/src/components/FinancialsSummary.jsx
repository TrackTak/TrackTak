import { Box, Typography } from "@material-ui/core";
import React, { useMemo } from "react";
import { useSelector } from "react-redux";
import selectValuationCurrencyCode from "../selectors/fundamentalSelectors/selectValuationCurrencyCode";
import selectValuationCurrencySymbol from "../selectors/fundamentalSelectors/selectValuationCurrencySymbol";
import selectYearlyIncomeStatements from "../selectors/fundamentalSelectors/selectYearlyIncomeStatements";
import selectRecentIncomeStatement from "../selectors/fundamentalSelectors/selectRecentIncomeStatement";
import selectYearlyBalanceSheets from "../selectors/fundamentalSelectors/selectYearlyBalanceSheets";
import selectRecentBalanceSheet from "../selectors/fundamentalSelectors/selectRecentBalanceSheet";
import { InfoOutlinedIconWrapper } from "./InfoOutlinedIconWrapper";
import FormatRawNumberToPercent from "./FormatRawNumberToPercent";
import withFundamentalsLoaded from "../hoc/withFundamentalsLoaded";
import useGetFinancialStatementRowData from "../hooks/useGetFinancialStatementRowData";
import useFinancialStatementColumns from "../hooks/useFinancialStatementColumns";
import FinancialsTable from "./FinancialsTable";
import { TableNumberFormatter } from "./TableFormatters";

const incomeStatementParam = [
  {
    valueKey: "totalRevenue",
    dataField: (
      <InfoOutlinedIconWrapper text="The total amount of income generated by the sale of goods/services related to the company's primary operations.">
        Revenue
      </InfoOutlinedIconWrapper>
    ),
  },
  {
    valueKey: "operatingIncome",
    dataField: (
      <InfoOutlinedIconWrapper text="Income earned by the company from it's day to day operations. Operating income includes Depreciation and Amortization, whereas EBITDA excludes it.">
        Operating Income
      </InfoOutlinedIconWrapper>
    ),
  },
  {
    valueKey: "operatingMargin",
    ValueFormatter: FormatRawNumberToPercent,
    dataField: (
      <InfoOutlinedIconWrapper text="Measures how much profit a company makes after paying for variable costs of production, such as wages and raw materials, but before paying interest or tax. Formula: Operating Income / Revenue.">
        Operating Margin
      </InfoOutlinedIconWrapper>
    ),
  },
];

const balanceSheetParam = [
  {
    valueKey: "minorityInterest",
    dataField: (
      <InfoOutlinedIconWrapper
        text="Reflects the requirement that if you own more than 50% of another company or have effective control of it, you have to consolidate that company's statements with yours.
          Thus, you count 100% of that subsidiaries assets, revenues and operating income with your company, even if you own only 60%.
          Minority interest reflects the book value of the 40% of the equity in the subsidiary that does not belong to you."
      >
        Minority interests
      </InfoOutlinedIconWrapper>
    ),
  },
  {
    valueKey: "cashAndShortTermInvestments",
    dataField: (
      <InfoOutlinedIconWrapper text="Short term investments are assets that can be readily bought and sold in a public market and can be liquidated to cash quickly.">
        Cash and short term investments
      </InfoOutlinedIconWrapper>
    ),
  },
  {
    valueKey: "bookValueOfEquity",
    dataField: (
      <InfoOutlinedIconWrapper text="Also known as Total Stock Holder Equity. The amount of assets remaining after all of it's liabilities have been paid. This is because Assets = Liabilities + Equity.">
        Book value of equity
      </InfoOutlinedIconWrapper>
    ),
  },
  {
    valueKey: "bookValueOfDebt",
    dataField: (
      <InfoOutlinedIconWrapper text="The total amount of debt of which the company owes, which is recorded in the books of the company. We include capital lease obligations in this number as lease obligations are a form of debt.">
        Book value of debt
      </InfoOutlinedIconWrapper>
    ),
  },
  {
    valueKey: "investedCapital",
    dataField: (
      <InfoOutlinedIconWrapper text="The amount of capital that has been invested into the business. The formula is: (Book Value of Equity + Book Value of Debt) - Cash and Short Term Investments. We minus the cash out because cash is not an investment as it returns nothing.">
        Invested capital
      </InfoOutlinedIconWrapper>
    ),
  },
  {
    valueKey: "salesToCapitalRatio",
    dataField: (
      <InfoOutlinedIconWrapper text="The efficiency of how much the company has to reinvest into the business to grow. The formula is: Revenue / Invested Capital. The higher the number the more efficient the company is.">
        Sales to capital ratio
      </InfoOutlinedIconWrapper>
    ),
    ValueFormatter: TableNumberFormatter,
  },
];

const FinancialsSummary = () => {
  const valuationCurrencyCode = useSelector(selectValuationCurrencyCode);
  const valuationCurrencySymbol = useSelector(selectValuationCurrencySymbol);
  const yearlyIncomeStatements = useSelector(selectYearlyIncomeStatements);
  const incomeStatement = useSelector(selectRecentIncomeStatement);
  const yearlyBalanceSheets = useSelector(selectYearlyBalanceSheets);
  const balanceSheet = useSelector(selectRecentBalanceSheet);
  const incomeStatementData = useGetFinancialStatementRowData(
    incomeStatement,
    yearlyIncomeStatements,
    true,
    incomeStatementParam,
  );
  const balanceSheetData = useGetFinancialStatementRowData(
    balanceSheet,
    yearlyBalanceSheets,
    true,
    balanceSheetParam,
  );
  const columns = useFinancialStatementColumns(yearlyIncomeStatements, true);

  const data = useMemo(() => {
    return [...incomeStatementData, ...balanceSheetData];
  }, [balanceSheetData, incomeStatementData]);

  return (
    <React.Fragment>
      <Box>
        <Typography variant="h5">Financials Summary</Typography>
        <Typography>
          Annuals in mln ({valuationCurrencyCode}:{valuationCurrencySymbol})
        </Typography>
      </Box>
      <FinancialsTable columns={columns} data={data} />
    </React.Fragment>
  );
};

export default withFundamentalsLoaded(FinancialsSummary);
