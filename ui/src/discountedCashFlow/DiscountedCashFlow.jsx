import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useLocation, useParams } from "react-router";
import { getFundamentals } from "../redux/actions/fundamentalsActions";
import { Box, Typography, useTheme } from "@material-ui/core";
import TTTable from "../components/TTTable";
import dayjs from "dayjs";
import FormatRawNumberToMillion from "../components/FormatRawNumberToMillion";
import Section from "../components/Section";
import DiscountedCashFlowSheet from "./DiscountedCashFlowSheet";
import blackScholes from "../shared/blackScholesModel";
import SubSection from "../components/SubSection";
import calculateCostOfCapital from "../shared/calculateCostOfCapital";
import SubscribeMailingList from "../components/SubscribeMailingList";
import parseInputQueryParams from "../shared/parseInputQueryParams";
import CompanyOverviewStats from "../components/CompanyOverviewStats";
import ValueDrivingInputs from "../components/ValueDrivingInputs";
import OptionalInputs from "../components/OptionalInputs";
import CostOfCapitalResults from "../components/CostOfCapitalResults";
import { InfoOutlinedIconWrapper } from "../components/InfoOutlinedIconWrapper";
import {
  InfoTextCostOfCapital,
  InfoTextValueDrivingInputs,
} from "../components/InfoText";

const mapFromStatementsToDateObject = (objectToLoop, valueKey) => {
  const dateObject = {};

  Object.keys(objectToLoop).forEach((key) => {
    const value = objectToLoop[key];

    dateObject[key] = <FormatRawNumberToMillion value={value[valueKey]} />;
  });

  return dateObject;
};

const fundamentalsFilter =
  "General,Highlights,SharesStats,Financials::Balance_Sheet,Financials::Income_Statement";

const DiscountedCashFlow = () => {
  const params = useParams();
  const location = useLocation();
  const dispatch = useDispatch();
  const fundamentals = useSelector((state) => state.fundamentals);
  const economicData = useSelector((state) => state.economicData);
  const equityRiskPremium = useSelector((state) => state.equityRiskPremium);
  const industryAverages = useSelector((state) => state.industryAverages);
  const theme = useTheme();
  const inputQueryParams = parseInputQueryParams(location);

  useEffect(() => {
    dispatch(
      getFundamentals({ ticker: params.ticker, filter: fundamentalsFilter })
    );
  }, [dispatch, params.ticker]);

  if (!fundamentals.data || !economicData.governmentBondTenYearLastClose)
    return null;

  const { SharesStats } = fundamentals.data;

  const riskFreeRate =
    economicData.governmentBondTenYearLastClose / 100 -
    equityRiskPremium.currentCountry.adjDefaultSpread;
  const valuePerOption = blackScholes(
    "call",
    fundamentals.price,
    inputQueryParams.averageStrikePrice,
    inputQueryParams.averageMaturityOfOptions,
    riskFreeRate,
    industryAverages.currentIndustry.standardDeviationInStockPrices
  );
  const { costOfCapital } = calculateCostOfCapital(
    fundamentals,
    inputQueryParams,
    SharesStats,
    equityRiskPremium,
    riskFreeRate,
    industryAverages.currentIndustry
  );
  const valueOfAllOptionsOutstanding =
    valuePerOption * inputQueryParams.numberOfOptionsOutstanding;

  const companyFundamentalsColumns = [
    {
      Header: "",
      accessor: "dataField",
    },
    {
      Header: "TTM",
      accessor: "ttm",
    },
  ].concat(
    Object.values(fundamentals.yearlyIncomeStatements).map((statement) => ({
      Header: dayjs(statement.date).format("MMM YY"),
      accessor: statement.date,
    }))
  );

  const rowData = [
    {
      dataField: (
        <InfoOutlinedIconWrapper text="The total amount of income generated by the sale of goods/services related to the company's primary operations.">
          Revenue
        </InfoOutlinedIconWrapper>
      ),
      ttm: fundamentals.hasIncomeTTM ? (
        <FormatRawNumberToMillion
          value={fundamentals.incomeStatement.totalRevenue}
        />
      ) : null,
      ...mapFromStatementsToDateObject(
        fundamentals.yearlyIncomeStatements,
        "totalRevenue"
      ),
    },
    {
      dataField: (
        <InfoOutlinedIconWrapper text="Income earned by the company from it's day to day operations. Operating income includes Depreciation and Amortization, whereas EBITDA excludes it.">
          Operating Income
        </InfoOutlinedIconWrapper>
      ),
      ttm: fundamentals.hasIncomeTTM ? (
        <FormatRawNumberToMillion
          value={fundamentals.incomeStatement.operatingIncome}
        />
      ) : null,
      ...mapFromStatementsToDateObject(
        fundamentals.yearlyIncomeStatements,
        "operatingIncome"
      ),
    },
    {
      dataField: (
        <InfoOutlinedIconWrapper text="The costs of borrowing money. Usually paid at a recurring rate every set date and time. For example: bonds, loans, convertible debt or lines of credit.">
          Interest Expense
        </InfoOutlinedIconWrapper>
      ),
      ttm: fundamentals.hasIncomeTTM ? (
        <FormatRawNumberToMillion
          value={fundamentals.incomeStatement.interestExpense}
        />
      ) : null,
      ...mapFromStatementsToDateObject(
        fundamentals.yearlyIncomeStatements,
        "interestExpense"
      ),
    },
    {
      dataField: (
        <InfoOutlinedIconWrapper text="Also known as Book Value of Equity is the amount of assets remaining after all of it's liabilities have been paid. This is because Assets = Liabilities + Equity.">
          Total Stockholders Equity
        </InfoOutlinedIconWrapper>
      ),
      ttm: (
        <FormatRawNumberToMillion
          value={fundamentals.balanceSheet.bookValueOfEquity}
        />
      ),
      ...mapFromStatementsToDateObject(
        fundamentals.yearlyBalanceSheets,
        "bookValueOfEquity"
      ),
    },
    {
      dataField: (
        <InfoOutlinedIconWrapper text="The total amount of debt of which the company owes, which is recorded in the books of the company. We include capital lease obligations in this number as lease obligations are a form of debt.">
          Book Value of Debt
        </InfoOutlinedIconWrapper>
      ),
      ttm: (
        <FormatRawNumberToMillion
          value={fundamentals.balanceSheet.bookValueOfDebt}
        />
      ),
      ...mapFromStatementsToDateObject(
        fundamentals.yearlyBalanceSheets,
        "bookValueOfDebt"
      ),
    },
    {
      dataField: (
        <InfoOutlinedIconWrapper text="Marketable securities are assets that can be readily bought and sold in a public market and can be liquidated to cash quickly.">
          Cash &amp; Marketable Securities
        </InfoOutlinedIconWrapper>
      ),
      ttm: (
        <FormatRawNumberToMillion
          value={fundamentals.balanceSheet.cashAndShortTermInvestments}
        />
      ),
      ...mapFromStatementsToDateObject(
        fundamentals.yearlyBalanceSheets,
        "cashAndShortTermInvestments"
      ),
    },
    {
      dataField: (
        <InfoOutlinedIconWrapper text="Non-operating assets are assets that are not considered to be part of a company's core operations for eg. unused land, spare equipment.">
          Cross Holdings &amp; Other Non-Operating Assets
        </InfoOutlinedIconWrapper>
      ),
      ttm: (
        <FormatRawNumberToMillion
          value={
            fundamentals.balanceSheet.noncontrollingInterestInConsolidatedEntity
          }
        />
      ),
      ...mapFromStatementsToDateObject(
        fundamentals.yearlyBalanceSheets,
        "noncontrollingInterestInConsolidatedEntity"
      ),
    },
    {
      dataField: (
        <InfoOutlinedIconWrapper
          text="Reflects the requirement that if you own more than 50% of another company or have effective control of it, you have to consolidate that company's statements with yours.
    Thus, you count 100% of that subsidiaries assets, revenues and operating income with your company, even if you own only 60%.
    Minority interest reflects the book value of the 40% of the equity in the subsidiary that does not belong to you."
        >
          Minority Interests
        </InfoOutlinedIconWrapper>
      ),
      ttm: fundamentals.hasIncomeTTM ? (
        <FormatRawNumberToMillion
          value={fundamentals.incomeStatement.minorityInterest}
        />
      ) : null,
      ...mapFromStatementsToDateObject(
        fundamentals.yearlyIncomeStatements,
        "minorityInterest"
      ),
    },
  ];

  return (
    <>
      <Box sx={{ display: "flex", gap: theme.spacing(10) }}>
        <CompanyOverviewStats />
      </Box>
      <Section>
        <Box sx={{ display: "flex", alignItems: "center" }}>
          <Typography variant="h5">Company Fundamentals</Typography>
          <Typography
            style={{
              marginLeft: theme.spacing(1),
              fontWeight: theme.typography.fontWeightBold,
            }}
          >
            ({fundamentals.valuationCurrencySymbol}:
            {fundamentals.valuationCurrencyCode})
          </Typography>
        </Box>
        <Box style={{ overflowX: "auto" }}>
          <TTTable columns={companyFundamentalsColumns} data={rowData} />
        </Box>
      </Section>
      <Section sx={{ display: "flex", gridColumnGap: 20, flexWrap: "wrap" }}>
        <Box sx={{ flex: 1 }}>
          <SubSection>
            <Typography variant="h5" gutterBottom>
              <InfoOutlinedIconWrapper text={<InfoTextValueDrivingInputs />}>
                Value Driving Inputs
              </InfoOutlinedIconWrapper>
            </Typography>
            <ValueDrivingInputs />
          </SubSection>
          <SubSection>
            <Typography variant="h5" gutterBottom>
              <InfoOutlinedIconWrapper text={<InfoTextCostOfCapital />}>
                Cost of Capital Results
              </InfoOutlinedIconWrapper>
            </Typography>
            <CostOfCapitalResults />
          </SubSection>
        </Box>
        <Box sx={{ flex: 1 }}>
          <SubSection>
            <Typography variant="h5" gutterBottom>
              Optional Inputs
            </Typography>
            <OptionalInputs />
          </SubSection>
        </Box>
      </Section>
      <Section>
        <Typography variant="h5" gutterBottom>
          Valuation
        </Typography>
        <DiscountedCashFlowSheet
          riskFreeRate={riskFreeRate}
          costOfCapital={costOfCapital}
          valueOfAllOptionsOutstanding={valueOfAllOptionsOutstanding}
        />
      </Section>
      <Section sx={{ display: "flex", mt: 2 }}>
        <Box
          sx={{
            display: "flex",
            flexDirection: "column",
            margin: "0 auto",
          }}
        >
          <Typography
            variant="h6"
            gutterBottom
            style={{ fontWeight: theme.typography.fontWeightBold }}
          >
            Want us to implement features you need?
          </Typography>
          <SubscribeMailingList subscribeText="Sign Up" />
        </Box>
      </Section>
    </>
  );
};

export default DiscountedCashFlow;
